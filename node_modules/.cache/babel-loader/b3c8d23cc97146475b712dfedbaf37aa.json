{"ast":null,"code":"import _slicedToArray from\"/home/yta-odoo/Documents/expence-tracker/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import{useState,useEffect}from\"react\";import{useNavigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";var AuthContext=/*#__PURE__*/React.createContext({idToken:\"\",email:\"\",onLogin:function onLogin(idToken){},onLogout:function onLogout(){},onResetPassword:function onResetPassword(tokne){}});export var AuthContextProvider=function AuthContextProvider(props){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),idToken=_useState2[0],setIdToken=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),email=_useState4[0],setEmail=_useState4[1];var navigate=useNavigate();// insted of useEffect we can directly fetch data from local storage,\n// then set it as initial state of idToken.\n// this is possible because localstorage is syncronus api\n// by doing this we are not override any state\nuseEffect(function(){var token=localStorage.getItem('token');var email=localStorage.getItem('email');if(token&&email){setIdToken(token);setEmail(email);}},[]);var onLogin=function onLogin(email,idToken){setIdToken(idToken);localStorage.setItem('token',idToken);localStorage.setItem('email',email);navigate('/');};var onLogout=function onLogout(){setIdToken(null);localStorage.clear();navigate('/auth');};var onResetPassword=function onResetPassword(token){setIdToken(token);localStorage.setItem('token',idToken);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{idToken:idToken,email:email,onLogin:onLogin,onLogout:onLogout,onResetPassword:onResetPassword},children:props.children});};export default AuthContext;","map":{"version":3,"sources":["/home/yta-odoo/Documents/expence-tracker/src/store/AuthContext.js"],"names":["React","useState","useEffect","useNavigate","AuthContext","createContext","idToken","email","onLogin","onLogout","onResetPassword","tokne","AuthContextProvider","props","setIdToken","setEmail","navigate","token","localStorage","getItem","setItem","clear","children"],"mappings":"8HAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,WAAT,KAA4B,kBAA5B,C,2CAEA,GAAMC,CAAAA,WAAW,cAAGJ,KAAK,CAACK,aAAN,CAAoB,CACpCC,OAAO,CAAE,EAD2B,CAEpCC,KAAK,CAAC,EAF8B,CAGpCC,OAAO,CAAE,iBAACF,OAAD,CAAa,CAAE,CAHY,CAIpCG,QAAQ,CAAE,mBAAO,CAAE,CAJiB,CAKpCC,eAAe,CAAE,yBAACC,KAAD,CAAW,CAAE,CALM,CAApB,CAApB,CAQA,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,KAAD,CAAW,CAC1C,cAA8BZ,QAAQ,CAAC,IAAD,CAAtC,wCAAOK,OAAP,eAAgBQ,UAAhB,eACA,eAA0Bb,QAAQ,CAAC,IAAD,CAAlC,yCAAOM,KAAP,eAAcQ,QAAd,eACA,GAAMC,CAAAA,QAAQ,CAAGb,WAAW,EAA5B,CAEA;AACA;AACA;AACA;AACAD,SAAS,CAAC,UAAM,CACZ,GAAMe,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CACA,GAAMZ,CAAAA,KAAK,CAAGW,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CACA,GAAIF,KAAK,EAAIV,KAAb,CAAoB,CAChBO,UAAU,CAACG,KAAD,CAAV,CACAF,QAAQ,CAACR,KAAD,CAAR,CACH,CACJ,CAPQ,CAON,EAPM,CAAT,CASA,GAAOC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACD,KAAD,CAAQD,OAAR,CAAoB,CACjCQ,UAAU,CAACR,OAAD,CAAV,CACAY,YAAY,CAACE,OAAb,CAAqB,OAArB,CAA8Bd,OAA9B,EACAY,YAAY,CAACE,OAAb,CAAqB,OAArB,CAA8Bb,KAA9B,EACAS,QAAQ,CAAC,GAAD,CAAR,CACH,CALD,CAOA,GAAMP,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnBK,UAAU,CAAC,IAAD,CAAV,CACAI,YAAY,CAACG,KAAb,GACAL,QAAQ,CAAC,OAAD,CAAR,CACH,CAJD,CAMA,GAAMN,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACO,KAAD,CAAW,CAC/BH,UAAU,CAACG,KAAD,CAAV,CACAC,YAAY,CAACE,OAAb,CAAqB,OAArB,CAA8Bd,OAA9B,EACH,CAHD,CAKA,mBAAO,KAAC,WAAD,CAAa,QAAb,EACP,KAAK,CAAE,CACHA,OAAO,CAAEA,OADN,CAEHC,KAAK,CAAEA,KAFJ,CAGHC,OAAO,CAAEA,OAHN,CAIHC,QAAQ,CAAEA,QAJP,CAKHC,eAAe,CAAEA,eALd,CADA,UASFG,KAAK,CAACS,QATJ,EAAP,CAWH,CA/CM,CAgDP,cAAelB,CAAAA,WAAf","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = React.createContext({\n    idToken: \"\",\n    email:\"\",\n    onLogin: (idToken) => {},\n    onLogout: () =>  {},\n    onResetPassword: (tokne) => {},\n})\n\nexport const AuthContextProvider = (props) => {\n    const [idToken, setIdToken] = useState(null);\n    const [email, setEmail] = useState(null);\n    const navigate = useNavigate();\n\n    // insted of useEffect we can directly fetch data from local storage,\n    // then set it as initial state of idToken.\n    // this is possible because localstorage is syncronus api\n    // by doing this we are not override any state\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        const email = localStorage.getItem('email');\n        if (token && email) {\n            setIdToken(token);\n            setEmail(email);\n        }\n    }, []);\n\n    const  onLogin = (email, idToken) => {\n        setIdToken(idToken);\n        localStorage.setItem('token', idToken);\n        localStorage.setItem('email', email);\n        navigate('/');\n    };\n\n    const onLogout = () => {\n        setIdToken(null);\n        localStorage.clear();\n        navigate('/auth');\n    };\n\n    const onResetPassword = (token) => {\n        setIdToken(token);\n        localStorage.setItem('token', idToken);\n    };\n\n    return <AuthContext.Provider\n    value={{\n        idToken: idToken,\n        email: email,\n        onLogin: onLogin,\n        onLogout: onLogout,\n        onResetPassword: onResetPassword\n    }}\n    >\n        {props.children}\n    </AuthContext.Provider>\n}\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}