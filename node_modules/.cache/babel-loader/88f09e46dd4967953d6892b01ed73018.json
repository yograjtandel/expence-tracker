{"ast":null,"code":"var _jsxFileName = \"/home/yta-odoo/Documents/pic/recat practice/expence-tracker/src/store/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  idToken: \"\",\n  onLogin: idToken => {},\n  onLogout: () => {},\n  onResetPassword: tokne => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [idToken, setIdToken] = useState(null);\n  const navigate = useNavigate(); // insted of useEffect we can directly fetch data from local storage,\n  // then set it as initial state of idToken.\n  // this is possible because localstorage is syncronus api\n  // by doing this we are not override any state\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      setIdToken(token);\n    }\n  }, []);\n\n  const onLogin = idToken => {\n    setIdToken(idToken);\n    localStorage.setItem('token', idToken);\n    navigate('/');\n  };\n\n  const onLogout = () => {\n    setIdToken(null);\n    localStorage.removeItem('token');\n    navigate('/');\n  };\n\n  const onResetPassword = token => {\n    setIdToken(token);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      idToken: idToken,\n      onLogin: onLogin,\n      onLogout: onLogout,\n      onResetPassword: onResetPassword\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AuthContextProvider, \"nDSvuf+0TwC4Rw1UqEP4gfjjCbI=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/yta-odoo/Documents/pic/recat practice/expence-tracker/src/store/AuthContext.js"],"names":["React","useState","useEffect","useNavigate","AuthContext","createContext","idToken","onLogin","onLogout","onResetPassword","tokne","AuthContextProvider","props","setIdToken","navigate","token","localStorage","getItem","setItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,CAAoB;AACpCC,EAAAA,OAAO,EAAE,EAD2B;AAEpCC,EAAAA,OAAO,EAAGD,OAAD,IAAa,CAAE,CAFY;AAGpCE,EAAAA,QAAQ,EAAE,MAAO,CAAE,CAHiB;AAIpCC,EAAAA,eAAe,EAAGC,KAAD,IAAW,CAAE;AAJM,CAApB,CAApB;AAOA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC1C,QAAM,CAACN,OAAD,EAAUO,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMa,QAAQ,GAAGX,WAAW,EAA5B,CAF0C,CAI1C;AACA;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIF,KAAJ,EAAW;AACPF,MAAAA,UAAU,CAACE,KAAD,CAAV;AACH;AACJ,GALQ,EAKN,EALM,CAAT;;AAOA,QAAOR,OAAO,GAAID,OAAD,IAAa;AAC1BO,IAAAA,UAAU,CAACP,OAAD,CAAV;AACAU,IAAAA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8BZ,OAA9B;AACAQ,IAAAA,QAAQ,CAAC,GAAD,CAAR;AACH,GAJD;;AAMA,QAAMN,QAAQ,GAAG,MAAM;AACnBK,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAG,IAAAA,YAAY,CAACG,UAAb,CAAwB,OAAxB;AACAL,IAAAA,QAAQ,CAAC,GAAD,CAAR;AACH,GAJD;;AAMA,QAAML,eAAe,GAAIM,KAAD,IAAW;AAC/BF,IAAAA,UAAU,CAACE,KAAD,CAAV;AACH,GAFD;;AAIA,sBAAO,QAAC,WAAD,CAAa,QAAb;AACP,IAAA,KAAK,EAAE;AACHT,MAAAA,OAAO,EAAEA,OADN;AAEHC,MAAAA,OAAO,EAAEA,OAFN;AAGHC,MAAAA,QAAQ,EAAEA,QAHP;AAIHC,MAAAA,eAAe,EAAEA;AAJd,KADA;AAAA,cAQFG,KAAK,CAACQ;AARJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAUH,CAzCM;;GAAMT,mB;UAEQR,W;;;KAFRQ,mB;AA0Cb,eAAeP,WAAf","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = React.createContext({\n    idToken: \"\",\n    onLogin: (idToken) => {},\n    onLogout: () =>  {},\n    onResetPassword: (tokne) => {},\n})\n\nexport const AuthContextProvider = (props) => {\n    const [idToken, setIdToken] = useState(null);\n    const navigate = useNavigate();\n\n    // insted of useEffect we can directly fetch data from local storage,\n    // then set it as initial state of idToken.\n    // this is possible because localstorage is syncronus api\n    // by doing this we are not override any state\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            setIdToken(token);\n        }\n    }, []);\n\n    const  onLogin = (idToken) => {\n        setIdToken(idToken);\n        localStorage.setItem('token', idToken);\n        navigate('/');\n    };\n\n    const onLogout = () => {\n        setIdToken(null);\n        localStorage.removeItem('token');\n        navigate('/');\n    };\n\n    const onResetPassword = (token) => {\n        setIdToken(token);\n    };\n\n    return <AuthContext.Provider\n    value={{\n        idToken: idToken,\n        onLogin: onLogin,\n        onLogout: onLogout,\n        onResetPassword: onResetPassword\n    }}\n    >\n        {props.children}\n    </AuthContext.Provider>\n}\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}