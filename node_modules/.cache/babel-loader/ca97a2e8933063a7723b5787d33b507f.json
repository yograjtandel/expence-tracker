{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  filterYear: \"2022\",\n  filtercategory: \"all\",\n  userID: \"\",\n  expences: []\n};\nconst ExpencesSlice = createSlice({\n  name: \"Expences\",\n  initialState,\n  reducers: {\n    updateExpence(state, action) {\n      // debugger\n      state.expences = [...state.expences, ...action.payload];\n    },\n\n    filter(state, action) {\n      state.filterYear = action.payload.year;\n      state.filtercategory = action.payload.category;\n    },\n\n    addUserId(state, action) {\n      state.userID = action.payload;\n      localStorage.setItem('userId', state.userID);\n    }\n\n  }\n});\nexport const AddExpence = expence => {\n  return async (dispatch, getState) => {\n    let userId = getState().expences.userID;\n    debugger;\n\n    const add_expence = async () => {\n      const expenceRes = await fetch(`https://expencetracker-b3897-default-rtdb.firebaseio.com/users/${userId}.json`, {\n        method: \"post\",\n        body: JSON.stringify(expence),\n        headers: {\n          \"Content-Type\": \"Application/Json\"\n        }\n      });\n\n      if (expenceRes.ok) {\n        return expenceRes.json();\n      } else {\n        throw new Error(\"not able to add new expence\");\n      }\n    };\n\n    if (userId) {\n      try {\n        const res = add_expence();\n        res.then(data => {\n          debugger;\n          expence['id'] = data['name'];\n          dispatch(ExpencesAction.updateExpence([expence]));\n        });\n        debugger;\n      } catch (error) {\n        alert(error);\n      }\n    }\n  };\n};\n_c = AddExpence;\nexport const ExpencesAction = ExpencesSlice.actions;\nexport default ExpencesSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddExpence\");","map":{"version":3,"sources":["/home/yta-odoo/Documents/expence-tracker/src/store/expences-slice.js"],"names":["createSlice","initialState","filterYear","filtercategory","userID","expences","ExpencesSlice","name","reducers","updateExpence","state","action","payload","filter","year","category","addUserId","localStorage","setItem","AddExpence","expence","dispatch","getState","userId","add_expence","expenceRes","fetch","method","body","JSON","stringify","headers","ok","json","Error","res","then","data","ExpencesAction","error","alert","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,MADO;AAEnBC,EAAAA,cAAc,EAAE,KAFG;AAGnBC,EAAAA,MAAM,EAAE,EAHW;AAInBC,EAAAA,QAAQ,EAAE;AAJS,CAArB;AAMA,MAAMC,aAAa,GAAGN,WAAW,CAAC;AAChCO,EAAAA,IAAI,EAAE,UAD0B;AAEhCN,EAAAA,YAFgC;AAGhCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B;AACAD,MAAAA,KAAK,CAACL,QAAN,GAAiB,CAAC,GAAGK,KAAK,CAACL,QAAV,EAAoB,GAAGM,MAAM,CAACC,OAA9B,CAAjB;AACD,KAJO;;AAKRC,IAAAA,MAAM,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,CAACR,UAAN,GAAmBS,MAAM,CAACC,OAAP,CAAeE,IAAlC;AACAJ,MAAAA,KAAK,CAACP,cAAN,GAAuBQ,MAAM,CAACC,OAAP,CAAeG,QAAtC;AACD,KARO;;AASRC,IAAAA,SAAS,CAACN,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACC,OAAtB;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BR,KAAK,CAACN,MAArC;AACD;;AAZO;AAHsB,CAAD,CAAjC;AAmBA,OAAO,MAAMe,UAAU,GAAIC,OAAD,IAAa;AACrC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,QAAIC,MAAM,GAAGD,QAAQ,GAAGjB,QAAX,CAAoBD,MAAjC;AACA;;AACA,UAAMoB,WAAW,GAAG,YAAY;AAC9B,YAAMC,UAAU,GAAG,MAAMC,KAAK,CAC3B,kEAAiEH,MAAO,OAD7C,EAE5B;AACEI,QAAAA,MAAM,EAAE,MADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,OAAf,CAFR;AAGEW,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHX,OAF4B,CAA9B;;AAWA,UAAIN,UAAU,CAACO,EAAf,EAAmB;AACjB,eAAOP,UAAU,CAACQ,IAAX,EAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF,KAjBD;;AAmBA,QAAIX,MAAJ,EAAa;AACX,UAAI;AACF,cAAMY,GAAG,GAAGX,WAAW,EAAvB;AACAW,QAAAA,GAAG,CAACC,IAAJ,CAASC,IAAI,IAAE;AACb;AACAjB,UAAAA,OAAO,CAAC,IAAD,CAAP,GAAgBiB,IAAI,CAAC,MAAD,CAApB;AACAhB,UAAAA,QAAQ,CAACiB,cAAc,CAAC7B,aAAf,CAA6B,CAACW,OAAD,CAA7B,CAAD,CAAR;AACD,SAJD;AAKA;AACD,OARD,CAQE,OAAOmB,KAAP,EAAc;AACdC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF;AACF,GAnCD;AAoCD,CArCM;KAAMpB,U;AAuCb,OAAO,MAAMmB,cAAc,GAAGhC,aAAa,CAACmC,OAArC;AACP,eAAenC,aAAa,CAACoC,OAA7B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  filterYear: \"2022\",\n  filtercategory: \"all\",\n  userID: \"\",\n  expences: [],\n};\nconst ExpencesSlice = createSlice({\n  name: \"Expences\",\n  initialState,\n  reducers: {\n    updateExpence(state, action) {\n      // debugger\n      state.expences = [...state.expences, ...action.payload];\n    },\n    filter(state, action) {\n      state.filterYear = action.payload.year;\n      state.filtercategory = action.payload.category;\n    },\n    addUserId(state, action) {\n      state.userID = action.payload;\n      localStorage.setItem('userId', state.userID);\n    }\n  },\n});\n\nexport const AddExpence = (expence) => {\n  return async (dispatch, getState) => {\n    let userId = getState().expences.userID;\n    debugger\n    const add_expence = async () => {\n      const expenceRes = await fetch(\n        `https://expencetracker-b3897-default-rtdb.firebaseio.com/users/${userId}.json`,\n        {\n          method: \"post\",\n          body: JSON.stringify(expence),\n          headers: {\n            \"Content-Type\": \"Application/Json\",\n          },\n        }\n      );\n\n      if (expenceRes.ok) {\n        return expenceRes.json()\n      } else {\n        throw new Error(\"not able to add new expence\");\n      }\n    };\n\n    if( userId ) {\n      try {\n        const res = add_expence();\n        res.then(data=>{\n          debugger\n          expence['id'] = data['name'];\n          dispatch(ExpencesAction.updateExpence([expence]));\n        })\n        debugger\n      } catch (error) {\n        alert(error);\n      }\n    }\n  };\n};\n\nexport const ExpencesAction = ExpencesSlice.actions;\nexport default ExpencesSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}