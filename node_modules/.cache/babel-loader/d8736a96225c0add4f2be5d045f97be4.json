{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  filterYear: \"\",\n  userID: \"\",\n  expences: []\n};\nconst ExpencesSlice = createSlice({\n  name: \"Expences\",\n  initialState,\n  reducers: {\n    updateExpence(state, action) {\n      debugger;\n      state.expences = [];\n    },\n\n    filter(state, action) {\n      state.filterYear = action.payload;\n    },\n\n    addUserId(state, action) {\n      state.userID = action.payload;\n      localStorage.setItem('userId', state.userID);\n    }\n\n  }\n});\nexport const AddExpence = expence => {\n  return async (dispatch, getState) => {\n    let userId = getState().expences.userID;\n\n    const add_expence = async () => {\n      const expenceRes = await fetch(`https://expencetracker-b3897-default-rtdb.firebaseio.com/users/${userId}.json`, {\n        method: \"post\",\n        body: JSON.stringify(expence),\n        headers: {\n          \"Content-Type\": \"Application/Json\"\n        }\n      });\n\n      if (!expenceRes.ok) {\n        throw new Error(\"not able to add new expence\");\n      }\n    };\n\n    if (userId) {\n      try {\n        add_expence();\n      } catch (error) {\n        alert(error);\n      }\n    }\n  };\n};\n_c = AddExpence;\nexport const ExpencesAction = ExpencesSlice.actions;\nexport default ExpencesSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddExpence\");","map":{"version":3,"sources":["/home/yta-odoo/Documents/pic/recat practice/expence-tracker/src/store/expences-slice.js"],"names":["createSlice","initialState","filterYear","userID","expences","ExpencesSlice","name","reducers","updateExpence","state","action","filter","payload","addUserId","localStorage","setItem","AddExpence","expence","dispatch","getState","userId","add_expence","expenceRes","fetch","method","body","JSON","stringify","headers","ok","Error","error","alert","ExpencesAction","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,EADO;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB;AAKA,MAAMC,aAAa,GAAGL,WAAW,CAAC;AAChCM,EAAAA,IAAI,EAAE,UAD0B;AAEhCL,EAAAA,YAFgC;AAGhCM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B;AACAD,MAAAA,KAAK,CAACL,QAAN,GAAiB,EAAjB;AACD,KAJO;;AAKRO,IAAAA,MAAM,CAACF,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,CAACP,UAAN,GAAmBQ,MAAM,CAACE,OAA1B;AACD,KAPO;;AAQRC,IAAAA,SAAS,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACE,OAAtB;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BN,KAAK,CAACN,MAArC;AACD;;AAXO;AAHsB,CAAD,CAAjC;AAkBA,OAAO,MAAMa,UAAU,GAAIC,OAAD,IAAa;AACrC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,QAAIC,MAAM,GAAGD,QAAQ,GAAGf,QAAX,CAAoBD,MAAjC;;AAEA,UAAMkB,WAAW,GAAG,YAAY;AAC9B,YAAMC,UAAU,GAAG,MAAMC,KAAK,CAC3B,kEAAiEH,MAAO,OAD7C,EAE5B;AACEI,QAAAA,MAAM,EAAE,MADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,OAAf,CAFR;AAGEW,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHX,OAF4B,CAA9B;;AAWA,UAAI,CAACN,UAAU,CAACO,EAAhB,EAAoB;AAClB,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF,KAfD;;AAiBA,QAAIV,MAAJ,EAAa;AACX,UAAI;AACFC,QAAAA,WAAW;AACZ,OAFD,CAEE,OAAOU,KAAP,EAAc;AACdC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF;AACF,GA3BD;AA4BD,CA7BM;KAAMf,U;AA+Bb,OAAO,MAAMiB,cAAc,GAAG5B,aAAa,CAAC6B,OAArC;AACP,eAAe7B,aAAa,CAAC8B,OAA7B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  filterYear: \"\",\n  userID: \"\",\n  expences: [],\n};\nconst ExpencesSlice = createSlice({\n  name: \"Expences\",\n  initialState,\n  reducers: {\n    updateExpence(state, action) {\n      debugger\n      state.expences = []\n    },\n    filter(state, action) {\n      state.filterYear = action.payload;\n    },\n    addUserId(state, action) {\n      state.userID = action.payload;\n      localStorage.setItem('userId', state.userID);\n    }\n  },\n});\n\nexport const AddExpence = (expence) => {\n  return async (dispatch, getState) => {\n    let userId = getState().expences.userID;\n\n    const add_expence = async () => {\n      const expenceRes = await fetch(\n        `https://expencetracker-b3897-default-rtdb.firebaseio.com/users/${userId}.json`,\n        {\n          method: \"post\",\n          body: JSON.stringify(expence),\n          headers: {\n            \"Content-Type\": \"Application/Json\",\n          },\n        }\n      );\n\n      if (!expenceRes.ok) {\n        throw new Error(\"not able to add new expence\");\n      }\n    };\n\n    if( userId ) {\n      try {\n        add_expence();\n      } catch (error) {\n        alert(error);\n      }\n    }\n  };\n};\n\nexport const ExpencesAction = ExpencesSlice.actions;\nexport default ExpencesSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}