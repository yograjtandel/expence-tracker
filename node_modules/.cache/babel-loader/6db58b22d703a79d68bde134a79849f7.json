{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport storage from \"../firebase\";\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { v4 as uuid } from 'uuid';\nconst initialState = {\n  filterYear: \"2022\",\n  filtercategory: \"all\",\n  userID: \"\",\n  expences: []\n};\nconst ExpencesSlice = createSlice({\n  name: \"Expences\",\n  initialState,\n  reducers: {\n    updateExpence(state, action) {\n      // debugger\n      state.expences = [...state.expences, ...action.payload];\n    },\n\n    filter(state, action) {\n      state.filterYear = action.payload.year;\n      state.filtercategory = action.payload.category;\n    },\n\n    addUserId(state, action) {\n      state.userID = action.payload;\n      localStorage.setItem(\"userId\", state.userID);\n    }\n\n  }\n});\nexport const AddExpence = expence => {\n  return async (dispatch, getState) => {\n    let userId = getState().expences.userID;\n\n    const add_expence = async () => {\n      const file = expence.bill; // const unique_id = uuid();\n\n      const storageRef = ref(storage, uuid());\n      await uploadBytes(storageRef, file).then(response => {\n        debugger;\n        return getDownloadURL(ref(storage, response.metadata.fullPath)).then(url => {\n          return url;\n        });\n      }).then(url => {\n        expence['billURL'] = url;\n      });\n      const expenceRes = await fetch(`https://expencetracker-b3897-default-rtdb.firebaseio.com/users/${userId}.json`, {\n        method: \"post\",\n        body: JSON.stringify(expence),\n        headers: {\n          \"Content-Type\": \"Application/Json\"\n        }\n      });\n\n      if (expenceRes.ok) {\n        return expenceRes.json();\n      } else {\n        throw new Error(\"not able to add new expence\");\n      }\n    };\n\n    if (userId) {\n      try {\n        const res = add_expence();\n        res.then(data => {\n          expence[\"id\"] = data[\"name\"];\n          dispatch(ExpencesAction.updateExpence([expence]));\n        });\n      } catch (error) {\n        alert(error);\n      }\n    }\n  };\n};\n_c = AddExpence;\nexport const ExpencesAction = ExpencesSlice.actions;\nexport default ExpencesSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddExpence\");","map":{"version":3,"sources":["/home/yta-odoo/Documents/expence-tracker/src/store/expences-slice.js"],"names":["createSlice","storage","ref","uploadBytes","getDownloadURL","v4","uuid","initialState","filterYear","filtercategory","userID","expences","ExpencesSlice","name","reducers","updateExpence","state","action","payload","filter","year","category","addUserId","localStorage","setItem","AddExpence","expence","dispatch","getState","userId","add_expence","file","bill","storageRef","then","response","metadata","fullPath","url","expenceRes","fetch","method","body","JSON","stringify","headers","ok","json","Error","res","data","ExpencesAction","error","alert","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,GAAT,EAAcC,WAAd,EAA2BC,cAA3B,QAAiD,kBAAjD;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,MADO;AAEnBC,EAAAA,cAAc,EAAE,KAFG;AAGnBC,EAAAA,MAAM,EAAE,EAHW;AAInBC,EAAAA,QAAQ,EAAE;AAJS,CAArB;AAMA,MAAMC,aAAa,GAAGZ,WAAW,CAAC;AAChCa,EAAAA,IAAI,EAAE,UAD0B;AAEhCN,EAAAA,YAFgC;AAGhCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B;AACAD,MAAAA,KAAK,CAACL,QAAN,GAAiB,CAAC,GAAGK,KAAK,CAACL,QAAV,EAAoB,GAAGM,MAAM,CAACC,OAA9B,CAAjB;AACD,KAJO;;AAKRC,IAAAA,MAAM,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,CAACR,UAAN,GAAmBS,MAAM,CAACC,OAAP,CAAeE,IAAlC;AACAJ,MAAAA,KAAK,CAACP,cAAN,GAAuBQ,MAAM,CAACC,OAAP,CAAeG,QAAtC;AACD,KARO;;AASRC,IAAAA,SAAS,CAACN,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACC,OAAtB;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BR,KAAK,CAACN,MAArC;AACD;;AAZO;AAHsB,CAAD,CAAjC;AAmBA,OAAO,MAAMe,UAAU,GAAIC,OAAD,IAAa;AACrC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,QAAIC,MAAM,GAAGD,QAAQ,GAAGjB,QAAX,CAAoBD,MAAjC;;AACA,UAAMoB,WAAW,GAAG,YAAY;AAC9B,YAAMC,IAAI,GAAGL,OAAO,CAACM,IAArB,CAD8B,CAE9B;;AACA,YAAMC,UAAU,GAAG/B,GAAG,CAACD,OAAD,EAAUK,IAAI,EAAd,CAAtB;AACA,YAAMH,WAAW,CAAC8B,UAAD,EAAaF,IAAb,CAAX,CAA8BG,IAA9B,CAAoCC,QAAD,IAAc;AACrD;AACA,eAAO/B,cAAc,CAACF,GAAG,CAACD,OAAD,EAAUkC,QAAQ,CAACC,QAAT,CAAkBC,QAA5B,CAAJ,CAAd,CAAyDH,IAAzD,CACJI,GAAD,IAAS;AACP,iBAAOA,GAAP;AACD,SAHI,CAAP;AAKD,OAPK,EAOHJ,IAPG,CAOII,GAAD,IAAS;AAChBZ,QAAAA,OAAO,CAAC,SAAD,CAAP,GAAqBY,GAArB;AACD,OATK,CAAN;AAWA,YAAMC,UAAU,GAAG,MAAMC,KAAK,CAC3B,kEAAiEX,MAAO,OAD7C,EAE5B;AACEY,QAAAA,MAAM,EAAE,MADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAelB,OAAf,CAFR;AAGEmB,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHX,OAF4B,CAA9B;;AAWA,UAAIN,UAAU,CAACO,EAAf,EAAmB;AACjB,eAAOP,UAAU,CAACQ,IAAX,EAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF,KA/BD;;AAiCA,QAAInB,MAAJ,EAAY;AACV,UAAI;AACF,cAAMoB,GAAG,GAAGnB,WAAW,EAAvB;AACAmB,QAAAA,GAAG,CAACf,IAAJ,CAAUgB,IAAD,IAAU;AACjBxB,UAAAA,OAAO,CAAC,IAAD,CAAP,GAAgBwB,IAAI,CAAC,MAAD,CAApB;AACAvB,UAAAA,QAAQ,CAACwB,cAAc,CAACpC,aAAf,CAA6B,CAACW,OAAD,CAA7B,CAAD,CAAR;AACD,SAHD;AAID,OAND,CAME,OAAO0B,KAAP,EAAc;AACdC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF;AACF,GA9CD;AA+CD,CAhDM;KAAM3B,U;AAkDb,OAAO,MAAM0B,cAAc,GAAGvC,aAAa,CAAC0C,OAArC;AACP,eAAe1C,aAAa,CAAC2C,OAA7B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport storage from \"../firebase\";\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { v4 as uuid } from 'uuid';\n\nconst initialState = {\n  filterYear: \"2022\",\n  filtercategory: \"all\",\n  userID: \"\",\n  expences: [],\n};\nconst ExpencesSlice = createSlice({\n  name: \"Expences\",\n  initialState,\n  reducers: {\n    updateExpence(state, action) {\n      // debugger\n      state.expences = [...state.expences, ...action.payload];\n    },\n    filter(state, action) {\n      state.filterYear = action.payload.year;\n      state.filtercategory = action.payload.category;\n    },\n    addUserId(state, action) {\n      state.userID = action.payload;\n      localStorage.setItem(\"userId\", state.userID);\n    },\n  },\n});\n\nexport const AddExpence = (expence) => {\n  return async (dispatch, getState) => {\n    let userId = getState().expences.userID;\n    const add_expence = async () => {\n      const file = expence.bill;\n      // const unique_id = uuid();\n      const storageRef = ref(storage, uuid());\n      await uploadBytes(storageRef, file).then((response) => {\n        debugger;\n        return getDownloadURL(ref(storage, response.metadata.fullPath)).then(\n          (url) => {\n            return url;\n          }\n        );\n      }).then ((url) => {\n        expence['billURL'] = url;\n      });\n\n      const expenceRes = await fetch(\n        `https://expencetracker-b3897-default-rtdb.firebaseio.com/users/${userId}.json`,\n        {\n          method: \"post\",\n          body: JSON.stringify(expence),\n          headers: {\n            \"Content-Type\": \"Application/Json\",\n          },\n        }\n      );\n\n      if (expenceRes.ok) {\n        return expenceRes.json();\n      } else {\n        throw new Error(\"not able to add new expence\");\n      }\n    };\n\n    if (userId) {\n      try {\n        const res = add_expence();\n        res.then((data) => {\n          expence[\"id\"] = data[\"name\"];\n          dispatch(ExpencesAction.updateExpence([expence]));\n        });\n      } catch (error) {\n        alert(error);\n      }\n    }\n  };\n};\n\nexport const ExpencesAction = ExpencesSlice.actions;\nexport default ExpencesSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}